// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: province_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProvinceServiceClient is the client API for ProvinceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProvinceServiceClient interface {
	GetProvinces(ctx context.Context, in *GetProvincesRequest, opts ...grpc.CallOption) (*GetProvincesResponse, error)
	GetProvince(ctx context.Context, in *GetProvinceRequest, opts ...grpc.CallOption) (*GetProvinceResponse, error)
}

type provinceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProvinceServiceClient(cc grpc.ClientConnInterface) ProvinceServiceClient {
	return &provinceServiceClient{cc}
}

func (c *provinceServiceClient) GetProvinces(ctx context.Context, in *GetProvincesRequest, opts ...grpc.CallOption) (*GetProvincesResponse, error) {
	out := new(GetProvincesResponse)
	err := c.cc.Invoke(ctx, "/erikrios.ponorogoregencyapi.ProvinceService/GetProvinces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *provinceServiceClient) GetProvince(ctx context.Context, in *GetProvinceRequest, opts ...grpc.CallOption) (*GetProvinceResponse, error) {
	out := new(GetProvinceResponse)
	err := c.cc.Invoke(ctx, "/erikrios.ponorogoregencyapi.ProvinceService/GetProvince", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProvinceServiceServer is the server API for ProvinceService service.
// All implementations must embed UnimplementedProvinceServiceServer
// for forward compatibility
type ProvinceServiceServer interface {
	GetProvinces(context.Context, *GetProvincesRequest) (*GetProvincesResponse, error)
	GetProvince(context.Context, *GetProvinceRequest) (*GetProvinceResponse, error)
	mustEmbedUnimplementedProvinceServiceServer()
}

// UnimplementedProvinceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProvinceServiceServer struct {
}

func (UnimplementedProvinceServiceServer) GetProvinces(context.Context, *GetProvincesRequest) (*GetProvincesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProvinces not implemented")
}
func (UnimplementedProvinceServiceServer) GetProvince(context.Context, *GetProvinceRequest) (*GetProvinceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProvince not implemented")
}
func (UnimplementedProvinceServiceServer) mustEmbedUnimplementedProvinceServiceServer() {}

// UnsafeProvinceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProvinceServiceServer will
// result in compilation errors.
type UnsafeProvinceServiceServer interface {
	mustEmbedUnimplementedProvinceServiceServer()
}

func RegisterProvinceServiceServer(s grpc.ServiceRegistrar, srv ProvinceServiceServer) {
	s.RegisterService(&ProvinceService_ServiceDesc, srv)
}

func _ProvinceService_GetProvinces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProvincesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvinceServiceServer).GetProvinces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/erikrios.ponorogoregencyapi.ProvinceService/GetProvinces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvinceServiceServer).GetProvinces(ctx, req.(*GetProvincesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProvinceService_GetProvince_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProvinceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProvinceServiceServer).GetProvince(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/erikrios.ponorogoregencyapi.ProvinceService/GetProvince",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProvinceServiceServer).GetProvince(ctx, req.(*GetProvinceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProvinceService_ServiceDesc is the grpc.ServiceDesc for ProvinceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProvinceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "erikrios.ponorogoregencyapi.ProvinceService",
	HandlerType: (*ProvinceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProvinces",
			Handler:    _ProvinceService_GetProvinces_Handler,
		},
		{
			MethodName: "GetProvince",
			Handler:    _ProvinceService_GetProvince_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "province_service.proto",
}
